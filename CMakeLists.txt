CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
CMAKE_POLICY(VERSION 2.8)

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" "${CMAKE_MODULE_PATH}")

FIND_PACKAGE(Torch REQUIRED)
FIND_PACKAGE(CUDA 6.5)

FILE(GLOB luasrc *.lua)

IF(CUDA_FOUND)
  # Detect CUDA architecture and get best NVCC flags
  INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCudaArch.cmake)
  SELECT_NVCC_ARCH_FLAGS(NVCC_FLAGS_EXTRA)
  LIST(APPEND CUDA_NVCC_FLAGS ${NVCC_FLAGS_EXTRA})

  INCLUDE_DIRECTORIES("${Torch_INSTALL_INCLUDE}/THC")
  LINK_DIRECTORIES("${Torch_INSTALL_LIB}")

  FILE(GLOB src-cuda *.cu)

  CUDA_ADD_LIBRARY(rfcn MODULE ${src-cuda})
  TARGET_LINK_LIBRARIES(rfcn luaT THC TH)
  IF(APPLE)
    SET_TARGET_PROPERTIES(rfcn PROPERTIES
      LINK_FLAGS "-undefined dynamic_lookup")
  ENDIF()

  ### Torch packages supposes libraries prefix is "lib"
  SET_TARGET_PROPERTIES(rfcn PROPERTIES
    PREFIX "lib"
    IMPORT_PREFIX "lib")

  INSTALL(TARGETS rfcn
    RUNTIME DESTINATION "${Torch_INSTALL_LUA_CPATH_SUBDIR}"
    LIBRARY DESTINATION "${Torch_INSTALL_LUA_CPATH_SUBDIR}")
ENDIF(CUDA_FOUND)

INSTALL(
  FILES
  ${luasrc}
  DESTINATION "${Torch_INSTALL_LUA_PATH_SUBDIR}/rfcn")
